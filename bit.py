import asyncio
import os
import subprocess
import tempfile
import logging
from datetime import datetime
from collections import deque
from typing import Dict
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8284574123:AAHLqnW_v6a6xix4DQ1Czu3YyijWptvB4pw"

bot = Bot(token=TOKEN)
dp = Dispatcher()

MAX_FILE_SIZE = 50 * 1024 * 1024
MAX_NOTE_DURATION = 60

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –º–Ω–æ–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
task_queue = deque()
AVERAGE_PROCESSING_TIME = 30  # –°–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–¥–∞—á—É
MAX_CONCURRENT_TASKS = 1  # –¢–æ–ª—å–∫–æ 1 –∑–∞–¥–∞—á–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å

class DownloadStates(StatesGroup):
    waiting_for_tt_url = State()
    waiting_for_yt_url = State()

async def process_queue(user_id: int, task: callable, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
    task_queue.append((user_id, task, message))
    queue_position = len([t for t in task_queue if t[0] == user_id])
    # –û—á–µ—Ä–µ–¥—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1 —Ä–∞–±–æ—Ç–∞–µ—Ç, 1 –∂–¥—ë—Ç)
    if len(task_queue) > 1:
        wait_time = (queue_position - 1) * AVERAGE_PROCESSING_TIME
        minutes = int(wait_time // 60)
        seconds = int(wait_time % 60)
        await message.answer(f"üîç –û—á–µ—Ä–µ–¥—å (–ø–æ–∑–∏—Ü–∏—è {queue_position}). –û–∂–∏–¥–∞–Ω–∏–µ: {minutes} –º–∏–Ω {seconds} —Å–µ–∫ üîç")
    while task_queue and task_queue[0][0] == user_id:
        current_task, current_message = task_queue.popleft()[1:]
        try:
            await current_task(current_message)
        except Exception as e:
            logger.error(f"Error in task: {e}")
            await current_message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è rate limiting

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç!</b>\n\n"
        "üé• <b>–ú–æ–≥—É:</b>\n"
        "‚Ä¢ –î–µ–ª–∞—Ç—å –∫—Ä—É–∂–∫–∏ –∏–∑ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å —Å TikTok (/tt_v_d)\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å —Å YouTube (/yt_v_d –∏–ª–∏ /yt_v_d{–∫–∞—á–µ—Å—Ç–≤–æ}, –≤–∫–ª—é—á–∞—è Shorts)\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É!",
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üé• <b>–í–∏–¥–µ–æ:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∫—Ä—É–∂–æ–∫(–∏)\n\n"
        "üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ /tt_v_d - TikTok –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
        "‚Ä¢ /yt_v_d - YouTube (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 720p, –≤–∫–ª—é—á–∞—è Shorts)\n"
        "‚Ä¢ /yt_v_d{–∫–∞—á–µ—Å—Ç–≤–æ} (–Ω–∞–ø—Ä–∏–º–µ—Ä, /yt_v_d720p)\n\n"
        "‚öôÔ∏è <b>–î—Ä—É–≥–æ–µ:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å\n"
        "‚Ä¢ /help - –ø–æ–º–æ—â—å",
        parse_mode="HTML"
    )

@dp.message(Command("tt_v_d"))
async def cmd_tt_download(message: Message, state: FSMContext):
    await message.answer("üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok")
    await state.set_state(DownloadStates.waiting_for_tt_url)

@dp.message(lambda message: message.text and message.text.startswith('/yt_v_d'))
async def cmd_yt_download(message: Message, state: FSMContext):
    cmd = message.text.strip()
    quality = None
    if len(cmd) > 7:
        quality_str = cmd[7:].lower().replace('p', '')
        try:
            quality = int(quality_str)
        except ValueError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π /yt_v_d720p")
            return
    await message.answer(f"üì• –û—Ç–ø—Ä–∞–≤—å YouTube-—Å—Å—ã–ª–∫—É{' (–∫–∞—á–µ—Å—Ç–≤–æ: ' + str(quality) + 'p)' if quality else ''}")
    await state.set_data({'yt_quality': quality})
    await state.set_state(DownloadStates.waiting_for_yt_url)

@dp.message(DownloadStates.waiting_for_yt_url)
async def handle_yt_url(message: Message, state: FSMContext):
    async def process_yt(message: Message):
        url = message.text.strip()
        if not url.startswith(('http://', 'https://')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            return
        data = await state.get_data()
        quality = data.get('yt_quality', 720)
        processing_msg = await message.answer(f"üì• –°–∫–∞—á–∏–≤–∞—é YouTube –≤ {quality}p...")
        temp_file = None
        max_retries = 3
        try:
            for attempt in range(max_retries):
                try:
                    temp_file = tempfile.mktemp(suffix='.mp4')
                    ydl_opts = {
                        'format': f'bestvideo[height<={quality}][vcodec!*=vp9]+bestaudio/best',  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Shorts
                        'outtmpl': temp_file,
                        'quiet': True,
                        'no_warnings': True,
                        'noplaylist': True,
                        'extractor_args': {
                            'youtube': {
                                'player_skip': 'js',
                                'skip': ['dash', 'hls'],  # –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Shorts
                            }
                        },
                        'retry_max': 3,  # Retry –¥–ª—è YouTube rate limiting
                        'force_keyframes_at_cuts': True  # –£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ
                    }
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([url])
                    if os.path.getsize(temp_file) > MAX_FILE_SIZE:
                        await message.answer("‚ùå –í–∏–¥–µ–æ >50MB")
                        os.remove(temp_file)
                        return
                    await message.answer_video(FSInputFile(temp_file), caption=f"üé• YouTube –≤ {quality}p")
                    await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
                    break
                except yt_dlp.utils.DownloadError as e:
                    if "sign in required" in str(e).lower() or "429" in str(e):
                        await message.answer("‚ùå YouTube —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞ –∏–ª–∏ rate limit. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏ yt-dlp.")
                    elif attempt < max_retries - 1:
                        await processing_msg.edit_text(f"üîç Retry {attempt + 1}/{max_retries}...")
                        await asyncio.sleep(5)
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏ yt-dlp.")
                    if temp_file and os.path.exists(temp_file):
                        os.remove(temp_file)
        finally:
            await state.clear()
            if temp_file and os.path.exists(temp_file):
                os.remove(temp_file)

    await process_queue(message.from_user.id, process_yt, message)

@dp.message(DownloadStates.waiting_for_tt_url)
async def handle_tt_url(message: Message, state: FSMContext):
    async def process_tt(message: Message):
        url = message.text.strip()
        if not url.startswith(('http://', 'https://')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            return
        processing_msg = await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é TikTok...")
        temp_file = None
        try:
            temp_file = tempfile.mktemp(suffix='.mp4')
            ydl_opts = {'format': 'best', 'outtmpl': temp_file, 'quiet': True, 'no_warnings': True}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                music_title = info.get('track', info.get('music', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                if isinstance(music_title, dict):
                    music_title = music_title.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                ydl.download([url])
            if os.path.getsize(temp_file) > MAX_FILE_SIZE:
                await message.answer("‚ùå –í–∏–¥–µ–æ >50MB")
                os.remove(temp_file)
                return
            await message.answer_video(FSInputFile(temp_file), caption=f"üé• TikTok –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\nüéµ –ú—É–∑—ã–∫–∞: {music_title}")
            await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logger.error(f"Error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        finally:
            await state.clear()
            if temp_file and os.path.exists(temp_file):
                os.remove(temp_file)

    await process_queue(message.from_user.id, process_tt, message)

@dp.message(lambda message: message.video is not None)
async def handle_video(message: Message):
    async def process_video(message: Message):
        input_path = tempfile.mktemp(suffix='.mp4')
        try:
            file_id = message.video.file_id
            file = await bot.get_file(file_id)
            processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            await bot.download_file(file.file_path, destination=input_path)
            duration_str = subprocess.check_output(["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", input_path]).decode().strip()
            duration = float(duration_str)
            if duration <= MAX_NOTE_DURATION:
                output_path = tempfile.mktemp(suffix='.mp4')
                subprocess.run(["ffmpeg", "-y", "-i", input_path, "-vf", "crop=min(iw\\,ih):min(iw\\,ih),scale=240:240", "-c:v", "libx264", "-preset", "fast", "-crf", "23", "-c:a", "aac", "-b:a", "64k", output_path], check=True)
                if os.path.getsize(output_path) > MAX_FILE_SIZE:
                    await message.answer("‚ùå –ö—Ä—É–∂–æ–∫ >50MB")
                else:
                    await message.answer_video_note(FSInputFile(output_path))
                os.remove(output_path)
            else:
                num_parts = int(duration // MAX_NOTE_DURATION) + (1 if duration % MAX_NOTE_DURATION > 0 else 0)
                await processing_msg.edit_text(f"üîÑ –î–µ–ª—é –Ω–∞ {num_parts} –∫—Ä—É–∂–∫–æ–≤...")
                for part in range(num_parts):
                    output_path = tempfile.mktemp(suffix='.mp4')
                    start_time = part * MAX_NOTE_DURATION
                    part_duration = min(MAX_NOTE_DURATION, duration - start_time)
                    subprocess.run(["ffmpeg", "-y", "-i", input_path, "-ss", str(start_time), "-t", str(part_duration), "-vf", "crop=min(iw\\,ih):min(iw\\,ih),scale=240:240", "-c:v", "libx264", "-preset", "fast", "-crf", "23", "-c:a", "aac", "-b:a", "64k", output_path], check=True)
                    if os.path.getsize(output_path) > MAX_FILE_SIZE:
                        await message.answer(f"‚ùå –ß–∞—Å—Ç—å {part+1} >50MB")
                    else:
                        await message.answer_video_note(FSInputFile(output_path), caption=f"–ß–∞—Å—Ç—å {part+1}/{num_parts}")
                    os.remove(output_path)
            await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logger.error(f"Error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        finally:
            if os.path.exists(input_path):
                os.remove(input_path)
            try:
                await processing_msg.delete()
            except:
                pass

    await process_queue(message.from_user.id, process_video, message)

@dp.message()
async def handle_other_messages(message: Message):
    text = message.text or ""
    if any(domain in text for domain in ["tiktok.com", "youtube.com", "youtu.be", "http://", "https://"]):
        await message.answer("üîó <b>–°—Å—ã–ª–∫–∞!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π /tt_v_d –∏–ª–∏ /yt_v_d.", parse_mode="HTML")
    else:
        await message.answer("ü§ñ <b>–ù–µ –ø–æ–Ω–∏–º–∞—é.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π /help –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ!", parse_mode="HTML")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        subprocess.run(["ffmpeg", "-version"], check=True, capture_output=True)
        print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
    except:
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏: pkg install ffmpeg")
        exit(1)
    try:
        subprocess.run(["yt-dlp", "--version"], check=True, capture_output=True)
        print("‚úÖ yt-dlp –Ω–∞–π–¥–µ–Ω")
    except:
        print("‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏: pip install yt-dlp")
        exit(1)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
